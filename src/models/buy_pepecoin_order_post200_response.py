# coding: utf-8

"""
    Pepay Web App API

    API for purchasing PepeCoin using USDT.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BuyPepecoinOrderPost200Response(BaseModel):
    """
    BuyPepecoinOrderPost200Response
    """ # noqa: E501
    payment_address: Optional[StrictStr] = Field(default=None, description="Unique deposit address for selected currency")
    payment_currency: Optional[StrictStr] = None
    payment_protocol: Optional[StrictStr] = None
    fixed_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snapshot price of Pepe in USDT")
    fixed_take_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snapshot price of Pepe in USDT")
    order_hash: Optional[StrictStr] = Field(default=None, description="Unique identifier for the new buy request")
    __properties: ClassVar[List[str]] = ["payment_address", "payment_currency", "payment_protocol", "fixed_rate", "fixed_take_amount", "order_hash"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BuyPepecoinOrderPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BuyPepecoinOrderPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_address": obj.get("payment_address"),
            "payment_currency": obj.get("payment_currency"),
            "payment_protocol": obj.get("payment_protocol"),
            "fixed_rate": obj.get("fixed_rate"),
            "fixed_take_amount": obj.get("fixed_take_amount"),
            "order_hash": obj.get("order_hash")
        })
        return _obj


